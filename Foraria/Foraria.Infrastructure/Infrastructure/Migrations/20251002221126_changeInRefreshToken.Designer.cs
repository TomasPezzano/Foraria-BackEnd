// <auto-generated />
using System;
using Foraria.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foraria.Migrations
{
    [DbContext(typeof(ForariaContext))]
    [Migration("20251002221126_changeInRefreshToken")]
    partial class changeInRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForariaDomain.CategoryPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categoryPoll", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Archive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClaimResponse_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimResponse_id")
                        .IsUnique();

                    b.HasIndex("User_id");

                    b.ToTable("claim", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.ClaimResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponsibleSector_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleSector_id");

                    b.HasIndex("UserId");

                    b.ToTable("claimResponse", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Consortium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("consortium", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPersons")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("forum", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Thread_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<string>("optionalFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Thread_id");

                    b.HasIndex("User_id");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("place", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryPoll_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultPoll_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryPoll_id");

                    b.HasIndex("ResultPoll_id")
                        .IsUnique()
                        .HasFilter("[ResultPoll_id] IS NOT NULL");

                    b.HasIndex("User_id");

                    b.ToTable("poll", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.PollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Poll_id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Poll_id");

                    b.ToTable("pollOption", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Place_id")
                        .HasColumnType("int");

                    b.Property<int>("Residence_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Place_id");

                    b.HasIndex("Residence_id");

                    b.HasIndex("User_id");

                    b.ToTable("reserves", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Residence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Tower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("residence", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.ResponsibleSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("responsibleSector", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.ResultPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("resultPoll", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Forum_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Forum_id");

                    b.HasIndex("User_id");

                    b.ToTable("thread", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("Dni")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("bit");

                    b.Property<int>("Role_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Role_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.UserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Consortium_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Consortium_id");

                    b.HasIndex("User_id");

                    b.ToTable("userDocument", (string)null);
                });

            modelBuilder.Entity("ForariaDomain.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PollOption_id")
                        .HasColumnType("int");

                    b.Property<int>("Poll_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PollOption_id");

                    b.HasIndex("Poll_id");

                    b.HasIndex("User_id");

                    b.ToTable("vote", (string)null);
                });

            modelBuilder.Entity("UserEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("UserResidence", b =>
                {
                    b.Property<int>("ResidenceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ResidenceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResidence");
                });

            modelBuilder.Entity("ForariaDomain.Claim", b =>
                {
                    b.HasOne("ForariaDomain.ClaimResponse", "ClaimResponse")
                        .WithOne("Claim")
                        .HasForeignKey("ForariaDomain.Claim", "ClaimResponse_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClaimResponse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.ClaimResponse", b =>
                {
                    b.HasOne("ForariaDomain.ResponsibleSector", "ResponsibleSector")
                        .WithMany("ClaimsResponse")
                        .HasForeignKey("ResponsibleSector_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("ClaimsResponse")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponsibleSector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.Message", b =>
                {
                    b.HasOne("ForariaDomain.Thread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("Thread_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.Poll", b =>
                {
                    b.HasOne("ForariaDomain.CategoryPoll", "CategoryPoll")
                        .WithMany("Polls")
                        .HasForeignKey("CategoryPoll_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.ResultPoll", "ResultPoll")
                        .WithOne("Poll")
                        .HasForeignKey("ForariaDomain.Poll", "ResultPoll_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Polls")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryPoll");

                    b.Navigation("ResultPoll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.PollOption", b =>
                {
                    b.HasOne("ForariaDomain.Poll", "Poll")
                        .WithMany("PollOptions")
                        .HasForeignKey("Poll_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("ForariaDomain.RefreshToken", b =>
                {
                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.Reserve", b =>
                {
                    b.HasOne("ForariaDomain.Place", "Place")
                        .WithMany("Reserves")
                        .HasForeignKey("Place_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.Residence", "Residence")
                        .WithMany("Reserves")
                        .HasForeignKey("Residence_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Reserves")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Residence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.Thread", b =>
                {
                    b.HasOne("ForariaDomain.Forum", "Forum")
                        .WithMany("Threads")
                        .HasForeignKey("Forum_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Threads")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Forum");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.User", b =>
                {
                    b.HasOne("ForariaDomain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ForariaDomain.UserDocument", b =>
                {
                    b.HasOne("ForariaDomain.Consortium", "Consortium")
                        .WithMany("UserDocuments")
                        .HasForeignKey("Consortium_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("UserDocuments")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consortium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForariaDomain.Vote", b =>
                {
                    b.HasOne("ForariaDomain.PollOption", "PollOption")
                        .WithMany("Votes")
                        .HasForeignKey("PollOption_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.Poll", "Poll")
                        .WithMany("Votes")
                        .HasForeignKey("Poll_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Poll");

                    b.Navigation("PollOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserEvent", b =>
                {
                    b.HasOne("ForariaDomain.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserResidence", b =>
                {
                    b.HasOne("ForariaDomain.Residence", null)
                        .WithMany()
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForariaDomain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForariaDomain.CategoryPoll", b =>
                {
                    b.Navigation("Polls");
                });

            modelBuilder.Entity("ForariaDomain.ClaimResponse", b =>
                {
                    b.Navigation("Claim")
                        .IsRequired();
                });

            modelBuilder.Entity("ForariaDomain.Consortium", b =>
                {
                    b.Navigation("UserDocuments");
                });

            modelBuilder.Entity("ForariaDomain.Forum", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("ForariaDomain.Place", b =>
                {
                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("ForariaDomain.Poll", b =>
                {
                    b.Navigation("PollOptions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ForariaDomain.PollOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ForariaDomain.Residence", b =>
                {
                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("ForariaDomain.ResponsibleSector", b =>
                {
                    b.Navigation("ClaimsResponse");
                });

            modelBuilder.Entity("ForariaDomain.ResultPoll", b =>
                {
                    b.Navigation("Poll")
                        .IsRequired();
                });

            modelBuilder.Entity("ForariaDomain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ForariaDomain.Thread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ForariaDomain.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("ClaimsResponse");

                    b.Navigation("Messages");

                    b.Navigation("Polls");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reserves");

                    b.Navigation("Threads");

                    b.Navigation("UserDocuments");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
